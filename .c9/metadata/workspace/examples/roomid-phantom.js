{"changed":false,"filter":false,"title":"roomid-phantom.js","tooltip":"/examples/roomid-phantom.js","value":"//\n// Copyright (c) 2016 Cisco Systems\n// Licensed under the MIT License \n//\n\n/* \n * a bot that gives you instant info about a room id\n * \n * note : this example could work with both a human (developer) or a bot account, \n * but the philosophy of this bot is really to use it with a bot account\n *  \n */\n\nvar debug = require(\"debug\")(\"samples\");\nvar fine = require(\"debug\")(\"samples:fine\");\n\n// Starts your Bot with default configuration. The SPARK API access token is read from the SPARK_TOKEN env variable \nvar SparkBot = require(\"node-sparkbot\");\nvar bot = new SparkBot();\n\n// do not listen to ourselves\n// uncomment if you're running the bot from your Developer access token and you want to invoke in a 1-1 room\n//bot.interpreter.ignoreSelf = false; \n\nvar SparkClient = require(\"node-sparky\");\nvar spark = new SparkClient({ token: process.env.SPARK_TOKEN });\n\n\nbot.onCommand(\"about\", function (command) {\n    spark.messageSendRoom(command.message.roomId, {\n        markdown: \"```\\n{\\n   'author':'St√®ve Sfartz <stsfartz@cisco.com>',\\n   'code':'https://github.com/ObjectIsAdvantag/sparkbot-webhook-samples/blob/master/examples/roomid-phantom.js',\\n   'description':'a handy tool to retreive Spark Rooms identifiers',\\n   'healthcheck':'GET https://sparkbot-roomid.herokuapp.com',\\n   'webhook':'POST https://sparkbot-roomid.herokuapp.com'\\n}\\n```\"\n    });\n});\n\n\nbot.onCommand(\"fallback\", function (command) {\n    // so happy to join\n    spark.messageSendRoom(command.message.roomId, {\n        text: \"sorry, I did not understand\"\n    })\n        .then(function (message) {\n            // show how to use\n            showHelp(command.message.roomId);\n        });\n});\nbot.onCommand(\"help\", function (command) {\n    showHelp(command.message.roomId);\n});\nfunction showHelp(roomId) {\n    spark.messageSendRoom(roomId, {\n        markdown: \"I am an ephemeral bot !\\n\\nAdd me to a Room: I'll send you back the room id in a private message and leave the room right away.\\n- /about\\n- /help\\n\"\n    });\n}\n\n\n\nbot.onEvent(\"memberships\", \"created\", function (trigger) {\n    var newMembership = trigger.data; // see specs here: https://developer.ciscospark.com/endpoint-memberships-get.html\n    if (newMembership.personId == bot.interpreter.person.id) {\n        debug(\"bot has just been added to room: \" + trigger.data.roomId);\n\n        // only take action if it is not the bot who created the room, to send the message back\n        if (trigger.actorId != bot.interpreter.person.id) {\n\n            // Retreive actorEmail\n            spark.personGet(trigger.actorId)\n                .then(function (person) {\n                    var email = person.emails[0];\n                    debug(\"found inquirer: \" + email);\n\n                    // Send a direct message\n                    spark.messageSendPerson(email, {\n                        markdown: \"extracted room id: **\" + newMembership.roomId + \"**\\n\\nwill now leave the room you asked me to inquire on...\"\n                    })\n                        .then(function (message) {\n\n                            // Leave inquired room\n                            spark.membershipRemove(newMembership.id)\n                                .then(function () {\n                                    spark.messageSendPerson(email, {\n                                        markdown: \"job done, I have left the inquired room. Au revoir !\"\n                                    });\n                                })\n                        });\n                })\n        }\n    }\n});\n\n","undoManager":{"mark":-1,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":56,"scrollleft":0,"selection":{"start":{"row":17,"column":40},"end":{"row":17,"column":40},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":2,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1509773821447}